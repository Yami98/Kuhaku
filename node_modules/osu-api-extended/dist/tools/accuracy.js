"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculate_accuracy = void 0;
const enums_1 = require("../types/enums");
const handleErrors_1 = require("../utility/handleErrors");
/**
 * Calculate accuracy from play hits
 *
 * &nbsp;
 *
 * ### Parameters
 * - `hits.geki` or `hits.perfect` or `hits.count_geki` - Amount of geki's
 * - `hits[300]` or `hits.great` or `hits.count_300` - Amount of 300's
 * - `hits.katu` or `hits.good` or `hits.count_katu` - Amount of katu's
 * - `hits[100]` or `hits.ok` or `hits.count_100` - Amount of 100's
 * - `hits[50]` or `hits.meh` or `hits.count_50` - Amount of 50's
 * - `hits[0]` or `hits.miss` or `hits.count_miss` - Amount of misses
 *
 * - `mode` - Number/Name of the gamemode
 *
 * &nbsp;
 *
 * ### Usage Example
 * ```js
 * const { tools } = require('osu-api-extended');
 *
 * function main() {
 *   try {
 *     const hits = { 300: 123, 100: 12, 50: 1, 0: 1 };
 *     const result = tools.calculate_accuracy(hits, 'osu');
 *     if (result.error != null) {
 *       console.log(result.error);
 *       return;
 *     };
 *
 *
 *     console.log(result);
 *   } catch (error) {
 *     console.log(error);
 *   };
 * };
 *
 * main();
 * ```
 */
const calculate_accuracy = (hits, mode) => {
    if (Object.keys(hits).length == 0) {
        return (0, handleErrors_1.handleErrors)(new Error('Provide hits (300, 100, 50, etc)'));
    }
    ;
    const geki = parseInt(hits.perfect || hits.count_geki || (hits === null || hits === void 0 ? void 0 : hits.geki) || '0');
    const h300 = parseInt(hits.great || hits.count_300 || (hits === null || hits === void 0 ? void 0 : hits[300]) || '0');
    const katu = parseInt(hits.good || hits.count_katu || (hits === null || hits === void 0 ? void 0 : hits.katu) || '0');
    const h100 = parseInt(hits.ok || hits.count_100 || (hits === null || hits === void 0 ? void 0 : hits[100]) || '0');
    const h50 = parseInt(hits.meh || hits.count_50 || (hits === null || hits === void 0 ? void 0 : hits[50]) || '0');
    const h0 = parseInt(hits.miss || hits.count_miss || (hits === null || hits === void 0 ? void 0 : hits[0]) || '0');
    let accuracy = 0.0;
    let fc_accuracy = 0.0;
    switch (mode) {
        case 'osu':
        case enums_1.GamemodeEnum.osu:
            accuracy = (100.0 * (6 * h300 + 2 * h100 + h50)) / (6 * (h50 + h100 + h300 + h0));
            fc_accuracy = (100.0 * (6 * (h300 + h0) + 2 * h100 + h50)) / (6 * (h50 + h100 + (h300 + h0) + 0));
            break;
        case 'taiko':
        case enums_1.GamemodeEnum.taiko:
            accuracy = (100.0 * (2 * h300 + h100)) / (2 * (h300 + h100 + h0));
            fc_accuracy = (100.0 * (2 * (h300 + h0) + h100)) / (2 * ((h300 + h0) + h100 + 0));
            break;
        case 'fruits':
        case enums_1.GamemodeEnum.fruits:
            accuracy = (100.0 * (h300 + h100 + h50)) / (h300 + h100 + h50 + katu + h0);
            fc_accuracy = (100.0 * ((h300 + h0) + h100 + h50)) / ((h300 + h0) + h100 + h50 + katu + 0);
            break;
        case 'mania':
        case enums_1.GamemodeEnum.mania:
            accuracy = (100.0 * (6 * geki + 6 * h300 + 4 * katu + 2 * h100 + h50)) / (6 * (h50 + h100 + h300 + h0 + geki + katu));
            // IT'S NOT CORRECT PLEASE SOMEONE FIX IT
            fc_accuracy = (100.0 * (6 * (geki + h0) + 6 * h300 + 4 * katu + 2 * h100 + h50)) / (6 * (h50 + h100 + h300 + 0 + (geki + h0) + katu));
            break;
        default:
            return (0, handleErrors_1.handleErrors)(new Error(`Unsupported gamemode: ${mode}}`));
    }
    ;
    return {
        accuracy,
        fc_accuracy,
    };
};
exports.calculate_accuracy = calculate_accuracy;
